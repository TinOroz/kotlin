/*
 * Copyright 2010-2017 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'kotlin'
apply plugin: 'c'

buildscript {
    ext.rootBuildDirectory = file('../..')

    apply from: "$rootBuildDirectory/gradle/kotlinGradlePlugin.gradle"

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-stdlib:${project.bootstrapKotlinVersion}"
    }
}
import org.jetbrains.kotlin.konan.target.ClangArgs


model {
    tasks.compileCallbacksSharedLibraryCallbacksC {
        dependsOn ":kotlin-native:dependencies:update"
    }
    components {
        callbacks(NativeLibrarySpec) {
            sources.c.source {
                srcDir 'src/callbacks/c'
                include '**/*.c'
            }
            binaries.all {
                def host = rootProject.project(":kotlin-native").ext.hostName

                def hostLibffiDir = rootProject.project(":kotlin-native").ext.get("${host}LibffiDir")

                cCompiler.args hostPlatform.clang.hostCompilerArgsForJni
                cCompiler.args "-I$hostLibffiDir/include"

                linker.args "$hostLibffiDir/lib/libffi.a"
            }
        }
   }

   toolChains {
     clang(Clang) {
       eachPlatform {
         cCompiler.withArguments(ClangArgs.&filterGradleNativeSoftwareFlags)
       }
     }
   }
}

dependencies {
    compile project(":kotlin-native:utilities:basic-utils")
    compile project(":kotlin-stdlib")
    compile project(":kotlin-reflect")
}

sourceSets.main.kotlin.srcDirs += "src/jvm/kotlin"

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xuse-experimental=kotlin.ExperimentalUnsignedTypes', '-Xuse-experimental=kotlin.Experimental',
                            '-Xopt-in=kotlin.RequiresOptIn', "-XXLanguage:+InlineClasses", "-Xskip-prerelease-check"]
        allWarningsAsErrors=true
    }
}


task nativelibs(type: Copy) {
    dependsOn 'callbacksSharedLibrary'

    from "$buildDir/libs/callbacks/shared/"
    into "$buildDir/nativelibs/"
}

classes.dependsOn nativelibs
